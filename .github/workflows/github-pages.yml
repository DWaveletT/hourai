name: Build and Deploy

on:
  push:
    branches:
      - master

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update apt
        run: sudo apt-get update

      - name: Install Pandoc
        run: |
          sudo apt-get install -y \
            pandoc

      - name: Detect TeX Live year
        id: detect-texlive
        run: |
          YEAR=$(date +%Y)
          echo "TL_YEAR=$YEAR" >> $GITHUB_ENV

      - name: Cache TeX Live
        uses: actions/cache@v4
        with:
          path: |
            ~/texlive
            ~/.texlive${{ env.TL_YEAR }}
          key: ${{ runner.os }}-texlive-${{ env.TL_YEAR }}
          restore-keys: |
            ${{ runner.os }}-texlive-

      - name: Install TeX Live if not cached
        run: |
          if [ ! -x "$HOME/texlive/${TL_YEAR}/bin/x86_64-linux/tlmgr" ]; then
            echo "TeX Live not found in cache, installing..."
            sudo apt-get update && sudo apt-get install -y perl wget
            wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
            tar -xzf install-tl-unx.tar.gz
            TL_DIR=$(find . -maxdepth 1 -type d -name "install-tl-*" | head -n 1)
            cd "$TL_DIR"
            sed "s/YYYY/${TL_YEAR}/g" $GITHUB_WORKSPACE/scripts/texlive.profile > profile
            sudo ./install-tl --profile=profile
          else
            echo "Using cached TeX Live"
          fi

      - name: Add TeX Live to PATH
        run: echo "$HOME/texlive/${TL_YEAR}/bin/x86_64-linux" >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pipenv'

      - name: Set up Mkdocs
        run: |
          pip install pipenv
          pipenv install

      - name: Build Markdown
        run: pipenv run python scripts/build_docs.py

      - name: Build PDF
        run: pipenv run python scripts/build_print.py

      - name: Build Web
        run: |
          pipenv run mkdocs build
          ls -R ./site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
