name: Build and Deploy

on:
  push:
    branches:
      - master

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create TeX Live deps file
        run: |
          echo "texlive-latex-base texlive-latex-recommended texlive-xetex texlive-lang-chinese texlive-fonts-recommended texlive-science lmodern latexmk pandoc" > scripts/texlive-deps.txt

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('scripts/texlive-deps.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Update apt
        run: sudo apt-get update

      - name: Install TeX Live (minimal)
        run: |
          sudo apt-get install -y \
            texlive-latex-base \
            texlive-latex-recommended \
            texlive-xetex \
            texlive-lang-chinese \
            texlive-fonts-recommended \
            texlive-science \
            lmodern \
            latexmk \
            pandoc

      # 获取当前 TeX Live 版本号
      - name: Detect TeX Live version
        id: detect-texlive
        run: |
          YEAR=$(tlmgr --version 2>/dev/null | grep -oE '[0-9]{4}' | head -n 1 || date +%Y)
          echo "TL_YEAR=$YEAR" >> $GITHUB_ENV
          echo "Detected TeX Live version: $YEAR"

      # 缓存 TeX Live 用户数据
      - name: Cache TeX Live user data
        uses: actions/cache@v4
        with:
          path: |
            ~/.texlive${{ env.TL_YEAR }}
            /usr/local/texlive
            /var/lib/texmf
          key: ${{ runner.os }}-texlive-${{ env.TL_YEAR }}-${{ hashFiles('scripts/texlive-deps.txt') }}
          restore-keys: |
            ${{ runner.os }}-texlive-${{ env.TL_YEAR }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pipenv'

      - name: Set up Mkdocs
        run: |
          pip install pipenv
          pipenv install

      - name: Build Markdown
        run: pipenv run python scripts/build_docs.py

      - name: Build PDF
        run: pipenv run python scripts/build_print.py

      - name: Build Web
        run: |
          pipenv run mkdocs build
          ls -R ./site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
